import { Injectable } from '@nestjs/common';
import * as XLSX from 'xlsx';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class FileService {
  async processFile(file: Express.Multer.File): Promise<Buffer> {
    const fileExtension = path.extname(file.originalname).toLowerCase();

    if (fileExtension === '.xls' || fileExtension === '.xlsx') {
      // Convert xls/xlsx to CSV
      const csvBuffer = this.convertExcelToCsv(file);
      return csvBuffer;
    } else if (fileExtension === '.csv') {
      // If it's already a CSV, pass it as is
      return file.buffer;
    } else {
      throw new Error('Unsupported file format. Only CSV, XLS, and XLSX are allowed.');
    }
  }

  private convertExcelToCsv(file: Express.Multer.File): Buffer {
    // Read the file buffer
    const workbook = XLSX.read(file.buffer, { type: 'buffer' });
    // Convert the first sheet to CSV
    const sheetName = workbook.SheetNames[0];
    const csvData = XLSX.utils.sheet_to_csv(workbook.Sheets[sheetName]);
    return Buffer.from(csvData, 'utf-8');
  }
}



import axios from 'axios';

async function sendToExternalApi(fileBuffer: Buffer) {
  const response = await axios.post('https://external.api/upload', fileBuffer, {
    headers: {
      'Content-Type': 'text/csv',
    },
  });

  return response.data;
}



import { Controller, Post, UploadedFile, UseInterceptors } from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import { FileService } from './file.service';

@Controller('upload')
export class FileController {
  constructor(private readonly fileService: FileService) {}

  @Post()
  @UseInterceptors(FileInterceptor('file'))
  async uploadFile(@UploadedFile() file: Express.Multer.File) {
    const processedFile = await this.fileService.processFile(file);
    const result = await sendToExternalApi(processedFile);
    return { message: 'File uploaded successfully', result };
  }
}
