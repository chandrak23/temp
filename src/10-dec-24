controller
+============

import {
  Get,
  Controller,
  Post,
  UploadedFile,
  UseInterceptors,
  BadRequestException,
  InternalServerErrorException,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import { diskStorage } from 'multer';
import { extname } from 'path';
import { AppService } from './app.service';
import * as multer from 'multer';


@Post('upload')
  @UseInterceptors(
    FileInterceptor('file', {
      storage: diskStorage({
        destination: './uploads',
        filename: (req, file, callback) => {
          const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
          callback(null, `${uniqueSuffix}${extname(file.originalname)}`);
        },
      }),
    }),
  )
  async uploadFile(@UploadedFile() file: Express.Multer.File): Promise<any> {
    console.log('**** file method hits');
    if (!file) {
      throw new BadRequestException('No file uploaded');
    }

    const fileExt = extname(file.originalname).toLowerCase();
    let tempCsvFilePath: string | undefined;
    console.log('**** fileExt ', fileExt, file);
    try {
      if (fileExt === '.csv') {
        tempCsvFilePath = file.path; // Directly use the CSV file
      } else if (fileExt === '.xls' || fileExt === '.xlsx') {
        console.log('**** found xlsx');
        tempCsvFilePath = await this.appService.convertXlsxToCsv(file.path); // Convert XLSX to CSV
        console.log('**** file conversion done', tempCsvFilePath);
      } else {
        throw new BadRequestException('Unsupported file format');
      }

      // Send the CSV to an external API
      const response = await this.appService.sendCsvToExternalApi(tempCsvFilePath);

      return { success: true, data: response };
      // return { success: true, data: tempCsvFilePath };
    } catch (error) {
      console.error('Error processing file:', error);
      throw new InternalServerErrorException('Error processing file');
    } finally {
      // Cleanup temporary files
      // if (tempCsvFilePath && tempCsvFilePath !== file.path) {
      //   fs.unlink(tempCsvFilePath, (err) => {
      //     if (err) console.error('Failed to delete temp CSV file:', err);
      //   });
      // }
      // fs.unlink(file.path, (err) => {
      //   if (err) console.error('Failed to delete uploaded file:', err);
      // });
    }
  }




service code 
===========

import * as ExcelJS from 'exceljs';
import * as fs from 'fs';
import * as path from 'path';
import { v4 as uuidv4 } from 'uuid';
import axios from 'axios';
import { createReadStream } from 'fs';
import * as csv from 'csv-parser'; // for reading we can ignore
import { Readable } from 'stream';
import * as FormData from 'form-data';

async convertXlsxToCsv(filePath: string): Promise<string> {
    const tempCsvFilePath = path.join('uploads', `${uuidv4()}.csv`);
    const writeStream = fs.createWriteStream(tempCsvFilePath);
    console.log('*** filePath', filePath)
    const workbook = new ExcelJS.Workbook();
    console.log('*** workbook', workbook)
    await workbook.xlsx.readFile(filePath); // Load the Excel file

    const worksheet = workbook.worksheets[0]; // Get the first worksheet
    worksheet.eachRow((row, rowNumber) => {
      // console.log('*** row, rowNumber ==>', rowNumber, row.values);
      const csvRow = (row.values as (string | number | null)[])
      .slice(1) // Remove the first element (the empty item)
      .map((val) => (val === null ? '' : `"${String(val).replace(/"/g, '""')}"`))
      .join(',');
      writeStream.write(csvRow + '\n');
    });

    writeStream.end();
    return tempCsvFilePath;
  }


async sendCsvToExternalApi(filePath: string): Promise<any> {
    const externalApiUrl = 'http://localhost:3000/csv-upload'; // External API URL

    // Create a read stream for the file
    const fileStream = createReadStream(filePath);
    // Attach an error listener to the file stream to catch any errors
    fileStream.on('error', (err) => {
      console.error('Error with file stream:', err);
    });

    console.log('Sending file from:', filePath);

    // Append the stream to the form data
    // Create a FormData instance
    const form = new FormData();
    form.append('file', fileStream, {
      filename: 'file.csv', // You can set the filename here
      contentType: 'text/csv', // Set the appropriate content type
    });

    // console.log('*** form', form);

  // Send the form data using axios
  try {
    const response = await axios.post(externalApiUrl, form, {
      headers: {
        ...form.getHeaders(), // Include the headers from form-data
      },
      maxContentLength: Infinity, // Adjust as necessary
      maxBodyLength: Infinity, // Adjust as necessary
    });

    console.log('API response:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error sending file to external API', error);
    throw error;  // Rethrow the error for further handling if needed
  }


  }
