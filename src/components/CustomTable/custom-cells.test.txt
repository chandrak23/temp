======== BadgeCell Test Cases


import React from "react";
import { render, screen } from "@testing-library/react";
import '@testing-library/jest-dom/extend-expect';
import { BadgeCell } from "./path-to-your-file";

test("renders Online Badge for online users", () => {
  render(<BadgeCell dataItem={{ is_online: true }} />);
  expect(screen.getByText("Online")).toBeInTheDocument();
});

test("renders Offline Badge for offline users", () => {
  render(<BadgeCell dataItem={{ is_online: false }} />);
  expect(screen.getByText("Offline")).toBeInTheDocument();
});



=========   BudgetCell Test Cases


import React from "react";
import { render, screen } from "@testing-library/react";
import '@testing-library/jest-dom/extend-expect';
import { BudgetCell } from "./path-to-your-file";

test("renders formatted budget", () => {
  render(<BudgetCell dataItem={{ target: 1234.567 }} />);
  expect(screen.getByText("$1234.567")).toBeInTheDocument();
});

test("renders nothing when target is undefined", () => {
  render(<BudgetCell dataItem={{}} />);
  expect(screen.queryByText("$")).not.toBeInTheDocument();
});



============ ColumnMenu Test Cases

import React from "react";
import { render } from "@testing-library/react";
import '@testing-library/jest-dom/extend-expect';
import { ColumnMenu } from "./path-to-your-file";

test("renders ColumnMenu with sort, filter, and group components", () => {
  const props = {}; // Add necessary props if required
  render(<ColumnMenu {...props} />);
  // Assuming GridColumnMenuSort, GridColumnMenuFilter, GridColumnMenuGroup have text in them that can be checked
  // Adjust these queries based on the actual content rendered by the components
  expect(screen.getByText(/Sort/)).toBeInTheDocument();
  expect(screen.getByText(/Filter/)).toBeInTheDocument();
  expect(screen.getByText(/Group/)).toBeInTheDocument();
});


======= PersonCell Test Cases


import React from "react";
import { render, screen } from "@testing-library/react";
import '@testing-library/jest-dom/extend-expect';
import { PersonCell } from "./path-to-your-file";

test("renders person name when image is not present", () => {
  render(<PersonCell dataItem={{ full_name: "John Doe" }} />);
  expect(screen.getByText("John Doe")).toBeInTheDocument();
});

test("renders person name and image when image is present", () => {
  const dataItem = {
    full_name: "John Doe",
    image: "url('http://example.com/image.jpg')",
  };
  render(<PersonCell dataItem={dataItem} />);
  expect(screen.getByText("John Doe")).toBeInTheDocument();
  expect(screen.getByRole('img')).toHaveAttribute('src', 'http://example.com/image.jpg');
});


============ ProgressCell Test Cases

import React from "react";
import { render, screen } from "@testing-library/react";
import '@testing-library/jest-dom/extend-expect';
import { ProgressCell } from "./path-to-your-file";

test("renders progress bar with correct value", () => {
  render(<ProgressCell dataItem={{ target: 70 }} />);
  expect(screen.getByText("70 %")).toBeInTheDocument();
  expect(screen.getByRole("progressbar")).toHaveAttribute("aria-valuenow", "70");
});

test("renders nothing for group header rows", () => {
  render(<ProgressCell dataItem={{ target: 70 }} rowType="groupHeader" />);
  expect(screen.queryByRole("progressbar")).not.toBeInTheDocument();
});



====== RatingCell Test Cases


import React from "react";
import { render, screen } from "@testing-library/react";
import '@testing-library/jest-dom/extend-expect';
import { RatingCell } from "./path-to-your-file";

test("renders rating with correct value", () => {
  render(<RatingCell dataItem={{ rating: 4 }} field="rating" />);
  expect(screen.getByRole("img")).toHaveAttribute("aria-valuenow", "4");
});

test("renders nothing for group header rows", () => {
  render(<RatingCell dataItem={{ rating: 4 }} field="rating" rowType="groupHeader" />);
  expect(screen.queryByRole("img")).not.toBeInTheDocument();
});



======= CountryCell Test Cases


import React from "react";
import { render, screen } from "@testing-library/react";
import '@testing-library/jest-dom/extend-expect';
import { CountryCell } from "./path-to-your-file";

test("renders country flag", () => {
  render(<CountryCell dataItem={{ flag: "http://example.com/flag.png" }} />);
  expect(screen.getByRole("img")).toHaveAttribute("src", "http://example.com/flag.png");
});

test("renders nothing when flag is not present", () => {
  render(<CountryCell dataItem={{}} />);
  expect(screen.queryByRole("img")).not.toBeInTheDocument();
});




